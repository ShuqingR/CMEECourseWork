======================================================================
AUTOMATED FEEDBACK LOG
======================================================================

HOW TO READ THIS FEEDBACK:
--------------------------
1. This log contains detailed feedback on your code execution
2. Each script is tested and results are shown with output and errors
3. IMPORTANT: Read all the way to the END for a summary and debugging guidance
4. The summary at the end will help you understand and fix any issues
5. Scripts are run in a headless environment (no GUI applications)

======================================================================

Starting testing for Shuqing Ren

Processing week 1

Your current Git repo size is about 1.45 MiB on disk

Found directories: .git, week1, week2, Feedback
Found files: README.md

Processing week 1: week1

Found 9 code files to test.

Note: Expected file checking not performed (no FileList provided).
Expected file checking will only be performed during final assessment.

======================================================================
Script: csvtospace.sh

Contents:

**********
#!/bin/bash
# Disc: covert file format for assigned temperature data, comma to space seperated values

for t in ../data/18*.csv;
    do 
        if [ -e "$t" ] # check if csv temperature files exists
        then # if input exists, run the code
            echo "Creating a space seperated version of $t ..."
            cat "$t" | tr "," " " >> "../results/$(basename "$t" .csv).ssv" 
            # convert the commas to spaces, save as a new file in ../results
            echo "Done!"
        else # if input missing, print reminder
            echo "No input file assigned"
        fi
    done

exit



**********

Output (first 500 chars):

**********
Creating a space seperated version of ../data/1800.csv ...
Done!
Creating a space seperated version of ../data/1801.csv ...
Done!
Creating a space seperated version of ../data/1802.csv ...
Done!
Creating a space seperated version of ../data/1803.csv ...
Done!

**********
No errors.
======================================================================
Script: MyExamplescript.sh

Contents:

**********
#!/bin/sh

MSG1="Hello"
MSG2=$USER
echo "$MSG1 $MSG2"
echo "Hello $USER"
echo
**********

Output (first 500 chars):

**********
Hello mhasoba
Hello mhasoba


**********
No errors.
======================================================================
Script: test.sh

Contents:

**********
# test the script
echo -e "test \t\t test" >> ../sandbox/test.txt

**********

Output (first 500 chars):

**********

**********
No errors.
======================================================================
Script: tiff2png.sh

Contents:

**********
#!/bin/bash

if [ -e "$1" ] # check input exist
then # if input exist, run the code
    echo "Converting $1 to ../results";
    convert "$1" "../results/$(basename "$1" .tif).png"
    # convert and redirect output to results folder
else # if no input, print reminder
    echo "No valid TIF file given"
fi        


**********

Output (first 500 chars):

**********
No valid TIF file given

**********
No errors.
======================================================================
Script: boilerplate.sh

Contents:

**********
#!/bin/sh
# Author: Shuqing Ren sr1822@ic.ac.uk
# Script: boilerplate.sh
# Desc: simple boilerplate for shell scripts
# Arguments: none
# Date: Oct 2025

echo -e "This is a shell script for" 
read    # assign a variable by reading user input
echo " ! "

#exit
**********

Output (first 500 chars):

**********
This is a shell script for
 ! 

**********
No errors.
======================================================================
Script: ConcatenateTwoFiles.sh

Contents:

**********
#!/bin/bash

if [ -e "$1" ] # check if $1 exist?
then # if $1 exist
    if [ -e "$2" ] # check if $2 exist?
    then # if $2 exist
        if [ -e "$3" ] # check if $3 exist?
        then # if $3 exist, run the code
            cat $1 > $3
            cat $2 >> $3
            echo "Merged File is"
            echo $3
        else # if no $3, print reminder
            echo "Failed merge, no output file."
        fi
    else # if no $2, print reminder
        echo "Failed merge, only one file input."
    fi
else # if no $1, print reminder
    echo "Failed merge, no input files."
fi
**********

Output (first 500 chars):

**********
Failed merge, no input files.

**********
No errors.
======================================================================
Script: tabtocsv.sh

Contents:

**********
#!bin/sh
# Author: Shuqing Ren sr1822@ic.ac.uk
# Script: tabtocsv.sh
# Description: substitute the tab in the files with commas
#
# Saves the output into a .csv file
# Arguments: 1 -> tab delimited file
# Date: Oct 2025

if [ -e "$1" ] # check if input file exists
then # if input exists, run the code
    echo "Creating a comma delimited version of $1 ..."
    cat $1 | tr -s "\t" "," >> $1.csv
    echo "Done!"
else # if input missing, print reminder
    echo "No input file assigned"
fi

exit

**********

Output (first 500 chars):

**********
No input file assigned

**********
No errors.
======================================================================
Script: variables.sh

Contents:

**********
#!/bin/sh

## Illustrates the use of variables 

# Special variables

echo "This script was called with $# parameters"
echo "The script's name is $0"
echo "The arguments are $@"
echo "The first argument is $1"
echo "The second argument is $2"

# Assigned Variables; Explicit declaration:
MY_VAR='some string' 
echo 'the current value of the variable is:' $MY_VAR
echo
echo 'Please enter a new string'
read MY_VAR
echo
echo 'the current value of the variable is:' $MY_VAR
echo

## Assigned Variables; Reading (multiple values) from user input:
echo 'Enter two numbers separated by space(s)'
read a b
echo
echo 'you entered' $a 'and' $b '; Their sum is:'

## Assigned Variables; Command substitution
MY_SUM=$(expr $a + $b)
echo $MY_SUM
**********

Output (first 500 chars):

**********
This script was called with 0 parameters
The script's name is variables.sh
The arguments are 
The first argument is 
The second argument is 
the current value of the variable is: some string

Please enter a new string

the current value of the variable is:

Enter two numbers separated by space(s)

you entered and ; Their sum is:


**********
Errors:
**********
expr: syntax error: missing argument after ‘+’

**********
======================================================================
Script: CountLines.sh

Contents:

**********
#!/bin/bash

if [ -e "$1" ] # check if $1 exist?
then # if input file exist, run the code
    NumLines=`wc -l < $1`
    echo "The file $1 has $NumLines lines"
else # if no input file, print reminder
    echo " No input file found"
fi
**********

Output (first 500 chars):

**********
 No input file found

**********
No errors.

======================================================================
FEEDBACK SUMMARY
======================================================================

Scripts tested: 11
Scripts successful: 10
Scripts with errors: 1
Warnings/Notes: 1

IMPORTANT DEBUGGING GUIDANCE:
------------------------------

Please review all warnings and errors, and your directory structure based on the above log.

Ask yourself: Why did I not get these warnings or errors on my machine when I tested my code?
Common reasons for environment differences:

• File paths: Your local machine may have different directory structures
• Dependencies: Missing packages or different versions
• File permissions: Scripts may not be executable on the testing server
• Case sensitivity: Linux systems are case-sensitive (your laptop may not be)
• Working directory: Scripts may assume they run from a specific location
• Input files: Required data files may be missing or in wrong locations

Debugging steps:
1. Test your code in a clean environment (fresh directory)
2. Check all file paths are relative and correct
3. Verify all required files are present and properly named
4. Test on a case-sensitive system if possible
5. Run your scripts from different directories to check robustness

Fix these issues and test again. Good debugging skills are essential for scientific computing!

